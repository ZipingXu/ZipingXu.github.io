---
layout:     post
title:      "Linux Command"
subtitle:   ""
date:       2017-10-13
author:     "Ziping"
header-img: "img/linux.jpg"
catalog: true
tags:
    - linux
---

## **常用指令**
```
ls　　        显示文件或目录
     -l           列出文件详细信息l(list)
     -a          列出当前目录下所有文件及目录，包括隐藏的a(all)
     
mkdir         创建目录
     -p           创建目录，若无父目录，则创建p(parent)
     
cd               切换目录

touch          创建空文件

echo            创建带有内容的文件。

cat              查看文件内容

cp                拷贝

mv               移动或重命名

rm               删除文件
     -r            递归删除，可删除子目录及文件
     -f            强制删除
     
find              在文件系统中搜索某文件

wc                统计文本中行数、字数、字符数

grep             在文本文件中查找某个字符串

rmdir           删除空目录

tree             树形结构显示目录，需要安装tree包

pwd              显示当前目录

ln                  创建链接文件

more、less  分页显示文本文件内容

head、tail    显示文件头、尾内容

ctrl+alt+F1  命令行全屏模式
```

## **系统管理命令**
```
stat              显示指定文件的详细信息，比ls更详细

who               显示在线登陆用户

whoami          显示当前操作用户

hostname      显示主机名

uname           显示系统信息

top                动态显示当前耗费资源最多进程信息

ps                  显示瞬间进程状态 ps -aux

du                  查看目录大小 du -h /home带有单位显示目录信息

df                  查看磁盘大小 df -h 带有单位显示磁盘信息

ifconfig          查看网络情况

ping                测试网络连通

netstat          显示网络状态信息

man                命令不会用了，找男人  如：man ls

clear              清屏

alias               对命令重命名 如：alias showmeit="ps -aux" ，另外解除使用unaliax showmeit

kill                 杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。

```

## **打包压缩相关命令**

```
gzip：

bzip2：

tar:                打包压缩

     -c              归档文件

     -x              压缩文件

     -z              gzip压缩文件

     -j              bzip2压缩文件

     -v              显示压缩或解压缩过程 v(view)

     -f              使用档名

例：

tar -cvf /home/abc.tar /home/abc              只打包，不压缩

tar -zcvf /home/abc.tar.gz /home/abc        打包，并用gzip压缩

tar -jcvf /home/abc.tar.bz2 /home/abc      打包，并用bzip2压缩

当然，如果想解压缩，就直接替换上面的命令  tar -cvf  / tar -zcvf  / tar -jcvf 中的“c” 换成“x” 就可以了。

```

## **关机/重启机器**
```
shutdown

     -r             关机重启

     -h             关机不重启

     now          立刻关机

halt               关机

reboot          重启
```

## **Linux管道**

将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。

例：grep -r "close" /home/* | more       在home目录下所有文件中查找，包括close的文件，并分页输出。

 

## **Linux软件包管理**
```
dpkg (Debian Package)管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。

比如安装tree命令的安装包，先将tree.deb传到Linux系统中。再使用如下命令安装。

sudo dpkg -i tree_1.5.3-1_i386.deb         安装软件

sudo dpkg -r tree                                     卸载软件

 

注：将tree.deb传到Linux系统中，有多种方式。VMwareTool，使用挂载方式；使用winSCP工具等；

APT（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。

依然以tree为例

sudo apt-get install tree                         安装tree

sudo apt-get remove tree                       卸载tree

sudo apt-get update                                 更新软件

sudo apt-get upgrade        

 

将.rpm文件转为.deb文件

.rpm为RedHat使用的软件格式。在Ubuntu下不能直接使用，所以需要转换一下。

sudo alien abc.rpm
```

## **vim使用**

Move

- w: move the cursor to the start of next word.
- e: move to the end of the next word
- b: move to the start of current word, or to the start of prior word

Insert

- o: insert a new line below
- shift + o: insert a new line above

Delete

- dd: delete the current line and copy it to clipboard
- dw: delete the current word and copy it to clipboard

Copy and Paste

Use *v* to enter visual mode, move the cursor to select some words

- y: copy what you selected
- yy: copy the whole line
- d: clip what you selected
- dd: clip the whole line
- p: paste

Find and Replace

- f + *word*: find word after the cursor
- F + *word*: find word before the cursor
- :/*word*: find the word in the file and you can use  regular expression
- :%s/*from*/*to*/: replace *from* to *to*
- :%s/*from*/*to*/gc: consult you before replace

Command for Shell

- :!command

```
vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。

命令模式下：

:q                      退出

:q!                     强制退出

:wq                   保存并退出

:set number     显示行号

:set nonumber  隐藏行号

/apache            在文档中查找apache 按n跳到下一个，shift+n上一个

yyp                   复制光标所在行，并粘贴

h(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)
```


## **用户及用户组管理**
```Shell

/etc/passwd    存储用户账号

/etc/group       存储组账号

/etc/shadow    存储用户账号的密码

/etc/gshadow  存储用户组账号的密码

useradd 用户名

userdel 用户名

adduser 用户名

groupadd 组名

groupdel 组名

passwd root     给root设置密码

su root

su - root 

/etc/profile     系统环境变量

bash_profile     用户环境变量

.bashrc              用户环境变量

su user              切换用户，加载配置文件.bashrc

su - user            切换用户，加载配置文件/etc/profile ，加载bash_profile

更改文件的用户及用户组

sudo chown [-R] owner[:group] {File|Directory}

例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop

要想切换此文件所属的用户及组。可以使用命令。

sudo chown root:root jdk-7u21-linux-i586.tar.gz

# add sudoer
su root or login with root
#get permission to write sudoer list: 
chmod u+w /etc/sudoers
vim /etc/sudoers
#find root ALL=(ALL) ALL and add yourname ALL=(ALL) ALL  
#remove sudoers write permission： 
chmod u-w /etc/sudoers

```


## **文件权限管理**

```
三种基本权限

R           读         数值表示为4

W          写         数值表示为2

X           可执行  数值表示为1



如图所示，jdk-7u21-linux-i586.tar.gz文件的权限为-rw-rw-r--

-rw-rw-r--一共十个字符，分成四段。

第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录

第二三四个字符“rw-”表示当前所属用户的权限。   所以用数值表示为4+2=6

第五六七个字符“rw-”表示当前所属组的权限。      所以用数值表示为4+2=6

第八九十个字符“r--”表示其他用户权限。              所以用数值表示为2

所以操作此文件的权限用数值表示为662 
```

## **更改权限**

```
sudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名 

例如：有一个文件filename，权限为“-rw-r----x” ,将权限值改为"-rwxrw-r-x"，用数值表示为765

sudo chmod u+x g+w o+r  filename

上面的例子可以用数值表示

sudo chmod 765 filename
```
# Shell

Shell支持自定义变量。



#### 定义变量

定义变量时，变量名不加美元符号（$），如：

```shell
variableName="value"
```

注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。

同时，变量名的命名须遵循如下规则：

- 首个字符必须为字母（a-z，A-Z）。
- 中间不能有空格，可以使用下划线（_）。
- 不能使用标点符号。
- 不能使用bash里的关键字（可用help命令查看保留关键字）。

变量定义举例：

```shell
myUrl="http://see.xidian.edu.cn/cpp/linux/"
myNum=100
```

使用变量

```shell
your_name="mozhiyan"
echo $your_name
echo ${your_name}
```

变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：

```shell
for skill in Ada Coffe Action Java 
do
    echo "I am good at ${skill}Script"
done
```

#### 只读变量

使用 readonly命令可以将变量定义为只读变量，只读变量的值不能被改变。

下面的例子尝试更改只读变量，结果报错：

```shell
#!/bin/sh
myUrl="http://see.xidian.edu.cn/cpp/shell/"
readonly myUrl
myUrl="http://see.xidian.edu.cn/cpp/danpianji/"
```

#### 变量类型

运行shell时，会同时存在三种变量：

#### 1) 局部变量

局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。

#### 2) 环境变量

所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。

#### 3) shell变量

shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行

#### 运行

```shell
#!/bin/sh
.....
```

```shell
/bin/sh run.sh
```
#### crontab

cron是一个linux下 的定时执行工具，可以在无需人工干预的情况下运行作业。由于Cron 是Linux的内置服务，但它不自动起来，可以用以下的方法启动、关闭这个服务：

```
/sbin/service crond start//启动服务
/sbin/service crond stop //关闭服务
/sbin/service crond restart  //重启服务
/sbin/service crond reload//重新载入配置
/sbin/service crond status//查看服务状态
```

# Copy Files Across Servers

以前一直是在服务器上tar打包压缩，下载到本地电脑上，再上传到另外一台服务器上，再解压。

其实使用scp就可以直接对拷文件或者文件夹了。

scp就是secure copy,是用来进行远程文件拷贝的.数据传输使用ssh1,并且和ssh1使用相同的认证方式,提供相同的安全保证.与rcp不同的是,scp会要求你输入密码如果需要的话. 

最简单的应用如下: 

```shell
scp local_user@IP1:name1 remote_user@IP2:name2 
```

意思是将本地的文件名1拷贝到，远程的文件名2内。

[本地用户名@IP地址:]可以不输入,可能需要输入远程用户名所对应的密码. 

可能有用的几个参数: 
-v 和大多数Linux命令中的-v意思一样,用来显示进度.可以用来查看连接,认证,或是配置错误. 
-C 使能压缩选项. 
-P 选择端口.注意-p已经被rcp使用. 
-4 强行使用IPV4地址. 
-6 强行使用IPV6地址. 
scp中很多参数都和ssh1有关,需要的话在看.

例如拷贝单个文件命令：

scp file username@ip:filepath

说明：file是要拷贝的文件名   

username:远程登录的用户名，

ip：远程服务器ip

filepath：远程文件路径

拷贝文件夹命令如下：scp -r file username@ip:filepath

多加上一个-r参数即可。

# example

```shell
ssh ziping@60.205.205.xx
scp -r ~/file yourUserName@60.205.205.xx:~/file/
```