---
layout:     post
title:      "C/C++ file system"
subtitle:   "An record of structure for file system in C/C++"
date:       2017-10-07
author:     "Ziping"
header-img: "img/c.jpg"
catalog: true
tags:
    - c/c++
---

# C/C++ file system

This is simple demo for file system operation.

In Unix/Linix system, ``direct.h`` defines some structures.

## Data Structure

**DIR:** structure for directory stream.

```c
struct __dirstream
{
	void *__fd; /* 'struct hurd_fd' pointer for descriptor.*/
	char *__data; /* Directory block. */
	int __entry_data; /* Entry number `__data' corresponds to.*/
	char *__ptr; /* Current pointer into the block.*/
	int __entry_ptr; /* Entry number `__ptr' corresponds to.*/
 	size_t __allocation; /* Space allocated for the block.*/
 	size_t __size; /* Total valid data in the block.*/
 	__libc_lock_define (, __lock) /* Mutex lock for this structure.*/
};
typedefstruct __dirstream DIR;
```

**struct dirent: ** file and directory information

```c
struct dirent
{
	long d_ino; /* inode number 索引节点号 */
 	off_t d_off; /* offset to this dirent 在目录文件中的偏移 */
	unsignedshort d_reclen; /* length of this d_name 文件名长 */
	unsignedchar d_type; /* the type of d_name 文件类型 */
	char d_name [NAME_MAX+1]; /* file name 文件名，最长255字符 */
}
```

## Funtions

```c
DIR* opendir(constchar* dirname);
/* Open a directory
 success - return pointer to DIR
 fail - return NULL */
intclosedir(DIR *dirp);
/* Close a directory stream
 success - return 0
 fail - return -1 */
struct dirent *readdir(DIR *dirp);
/* Read a directory stream
 success - return a pointer to struct dirent object
 fail - return NULL */
intreaddir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
/* Read a directory stream: initialize entry with dirp, result is a pointer to entry
 success - return 0
 fail - return error number */
voidrewinddir(DIR *dirp);
/* reset to the head */
voidseekdir(DIR *dirp, longint loc);
/* reset the location of dirp */
longinttelldir(DIR *dirp);
/* return the current location */
```

## Demo

```c
#include <iostream>
#include <direct.h>
using name space std;
int main()
{
  string dirname;
  DIR *dp;
  struct dirent *dirp;
  cout << "Please input a directory: ";
  cin >> dirname;
  if((dp = opendir(dirname.c_str())) == NULL)
  cout << "Can't open " << dirname << endl;
  while((dirp = readdir(dp)) != NULL)
  cout << dirp->d_name << endl;
  closedir(dp);
  return 0;
}
```

Find the specific file type

```c
#include <regex.h>
regex reg_obj(".*\.doc", regex::icase);
while((dirp = readdir(dp)) != NULL)
if(regex_match(dirp->d_name, reg_obj)) // regex_match()匹配
cout << dirp->d_name << endl;
```

## Read .csv in C/C++

```c
string Trim(string& str)  
{
    //str.find_first_not_of(" \t\r\n"),在字符串str中从索引0开始，返回首次不匹配"\t\r\n"的位置  
    str.erase(0,str.find_first_not_of(" \t\r\n"));  
    str.erase(str.find_last_not_of(" \t\r\n") + 1);  
    return str;  
}  
int readSingleFile(double* pnl, int dim, char* file_name){
	//cout << file_name << endl;
	ifstream fin(file_name); //打开文件流操作
    string line;
    int count = 0;

    while (getline(fin, line))   //整行读取，换行符“\n”区分，遇到文件尾标志eof终止读取  
    {   
        istringstream sin(line); //将整行字符串line读入到字符串流istringstream中  
        vector<string> fields; //声明一个字符串向量  
        string field;
        while (getline(sin, field, ',')) //将字符串流sin中的字符读入到field字符串中，以逗号为分隔符  
        {  
            fields.push_back(field); //将刚刚读取的字符串添加到向量fields中  
        }
        string t_pnl = Trim(fields[1]); //清除掉向量fields中第二个元素的无效字符，并赋值给变量age  
        pnl[count] = stod(t_pnl);
        //cout << pnl[count] << ", ";
        count++;
    }
    return count;
    //cout << endl;
}
```

