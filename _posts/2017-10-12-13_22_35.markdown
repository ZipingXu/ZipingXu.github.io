---
layout:     post
title:      "How to connect sql database in python"
subtitle:   "use mysql and xxx"
date:       2017-10-12
author:     "Ziping"
header-img: "img/python.jpg"
catalog: true
tags:
    - python
    - mysql
---

This blog is to record my process to connect mysql database in python.

I choose MySQLdb as my tool because it is said that MySQLdb is the most stable way to connect to a MySQL database.

MySQLdb doesnot support Python3 because I got an error:

```python
$ sudo pip install MySQL-python
Collecting MySQL-python
  Downloading http://mirrors.aliyun.com/pypi/packages/a5/e9/51b544da85a36a68debe7a7091f068d802fc515a3a202652828c73453cad/MySQL-python-1.2.5.zip (108kB)
    100% |████████████████████████████████| 112kB 637kB/s 
    Complete output from command python setup.py egg_info:
    sh: mysql_config: command not found
    Traceback (most recent call last):
      File "<string>", line 1, in <module>
      File "/tmp/pip-build-TmLXPF/MySQL-python/setup.py", line 17, in <module>
        metadata, options = get_config()
      File "setup_posix.py", line 43, in get_config
        libs = mysql_config("libs_r")
      File "setup_posix.py", line 25, in mysql_config
        raise EnvironmentError("%s not found" % (mysql_config.path,))
    EnvironmentError: mysql_config not found
    
    ----------------------------------------
Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-build-TmLXPF/MySQL-python/
```

The config file missing here is cause by ``ConfigParser`` that has changed in python3.

There is a replacement in Python3, ``pymysql``

The following is a simple case for fetching data.

```shell
pip install pymysql
```

```Python
#coding=utf-8
 
import pymysql as MySQLdb

host 	= "xxxx"
db 		= "xxxx"
user 	= "xxxx"
port 	= "xxxx"
passwd 	= "xxxx"


class SelectMySQL(object):
    def select_data(self,sql):
        result = []
        try:
            conn = MySQLdb.connect(host=host,
                               port=port,
                               user=user,
                               passwd=passwd,
                               db=db,
                               charset='utf8', )
            cur = conn.cursor()
            cur.execute(sql)
            alldata = cur.fetchall()
            # print(alldata)
            for rec in alldata:
                result.append(rec[0])
        except Exception as e:
            print('Error msg: ' + e)
        finally:
            cur.close()
            conn.close()
  
        return result

    def get_result(self, sql, filename):
        print(sql)
        results = self.select_data(sql)
        print('The amount of datas: %d' % (len(results)))
        with open(filename, 'w') as f:
            for result in results:
                f.write(str(result) + '\n')
        print('Data write is over!')
        return results

if __name__ == '__main__':
    sql = "select name from user"
    select = SelectMySQL()
    result1 = select.get_result(sql,'namemsg.txt')
    print(result1)
```

add your sql command.

## Create and Insert Table

It's important that you should begin and commit a transection when you have to write.

```python
conn = MySQLdb.connect(host=host,
                   port=port,
                   user=user,
                   passwd=passwd,
                   db=db,
                   charset='utf8')
conn.begin()
cur = conn.cursor()
create_table = """
use alpha;
DROP TABLE IF EXISTS xzp_alpha_id;
CREATE TABLE xzp_alpha_id (
    secID VARCHAR(20),
    date VARCHAR(10),
    value DOUBLE
);

INSERT INTO xzp_alpha_id (secID, date, value)
VALUES ('603152', '20170921', null);
"""
conn.commit()
cur.execute(create_table)
cur.close()
conn.close()
```

## MySQL Data Types

In MySQL there are three main data types: text, number, and date.

### Text data types:

| Data type        | Description                              |
| ---------------- | ---------------------------------------- |
| CHAR(size)       | Holds a fixed length string (can contain letters, numbers, and special characters). The fixed size is specified in parenthesis. Can store up to 255 characters |
| VARCHAR(size)    | Holds a variable length string (can contain letters, numbers, and special characters). The maximum size is specified in parenthesis. Can store up to 255 characters. **Note:** If you put a greater value than 255 it will be converted to a TEXT type |
| TINYTEXT         | Holds a string with a maximum length of 255 characters |
| TEXT             | Holds a string with a maximum length of 65,535 characters |
| BLOB             | For BLOBs (Binary Large OBjects). Holds up to 65,535 bytes of data |
| MEDIUMTEXT       | Holds a string with a maximum length of 16,777,215 characters |
| MEDIUMBLOB       | For BLOBs (Binary Large OBjects). Holds up to 16,777,215 bytes of data |
| LONGTEXT         | Holds a string with a maximum length of 4,294,967,295 characters |
| LONGBLOB         | For BLOBs (Binary Large OBjects). Holds up to 4,294,967,295 bytes of data |
| ENUM(x,y,z,etc.) | Let you enter a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a blank value will be inserted.**Note:** The values are sorted in the order you enter them.You enter the possible values in this format: ENUM('X','Y','Z') |
| SET              | Similar to ENUM except that SET may contain up to 64 list items and can store more than one choice |

### Number data types:

| Data type       | Description                              |
| --------------- | ---------------------------------------- |
| TINYINT(size)   | -128 to 127 normal. 0 to 255 UNSIGNED*. The maximum number of digits may be specified in parenthesis |
| SMALLINT(size)  | -32768 to 32767 normal. 0 to 65535 UNSIGNED*. The maximum number of digits may be specified in parenthesis |
| MEDIUMINT(size) | -8388608 to 8388607 normal. 0 to 16777215 UNSIGNED*. The maximum number of digits may be specified in parenthesis |
| INT(size)       | -2147483648 to 2147483647 normal. 0 to 4294967295 UNSIGNED*. The maximum number of digits may be specified in parenthesis |
| BIGINT(size)    | -9223372036854775808 to 9223372036854775807 normal. 0 to 18446744073709551615 UNSIGNED*. The maximum number of digits may be specified in parenthesis |
| FLOAT(size,d)   | A small number with a floating decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter |
| DOUBLE(size,d)  | A large number with a floating decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter |
| DECIMAL(size,d) | A DOUBLE stored as a string , allowing for a fixed decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter |

### Date data types:

| Data type   | Description                              |
| ----------- | ---------------------------------------- |
| DATE()      | A date. Format: YYYY-MM-DD**Note:** The supported range is from '1000-01-01' to '9999-12-31' |
| DATETIME()  | *A date and time combination. Format: YYYY-MM-DD HH:MI:SS**Note:** The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59' |
| TIMESTAMP() | *A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch ('1970-01-01 00:00:00' UTC). Format: YYYY-MM-DD HH:MI:SS**Note:** The supported range is from '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC |
| TIME()      | A time. Format: HH:MI:SS**Note:** The supported range is from '-838:59:59' to '838:59:59' |
| YEAR()      | A year in two-digit or four-digit format.**Note:** Values allowed in four-digit format: 1901 to 2155. Values allowed in two-digit format: 70 to 69, representing years from 1970 to 2069 |

[//]: #	"host = rm-2ze3gjtcm507w8vqto.mysql.rds.aliyuncs.com; dbname = alpha; user = xu.zp; pwd = xzpDeepX"

